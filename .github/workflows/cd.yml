name: CD - Deploy Fullstack Containers to ECS Server

on:
  workflow_run:
    workflows: ["CI2 - Build & Push Docker Image"]
    types: [completed]
  workflow_dispatch:
    inputs:
      manual:
        description: '手动触发部署'
        required: false
        default: 'true'

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'workflow_dispatch') ||
      (github.event.workflow_run.conclusion == 'success' &&
       github.event.workflow_run.head_branch == 'main')

    steps:
      - name: 🚀 全栈自动部署到 ECS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "✅ 开始自动部署 fullstack-mvp 全栈容器 ..."
            cd /root/fullstack-mvp/deploy/prod

            echo "🧹 清理旧容器..."
            docker compose down

            echo "⬇️ 拉取最新镜像..."
            docker compose pull

            echo "🧱 启动完整容器集群..."
            docker compose up -d

            echo "🧼 清理无用镜像..."
            docker image prune -f

      - name: 🩺 健康检查（HTTPS）
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "🩺 检查服务健康状态..."
            sleep 10

            if ! docker ps --filter "name=prod_app" --format '{{.Names}}' | grep -q "prod_app"; then
              echo "❌ 应用容器未运行！可能启动失败"
              docker ps -a
              docker logs prod_app || true
              exit 1
            fi

            echo "📜 最近容器日志（30 行）:"
            docker logs prod_app | tail -n 30

            STATUS_CODE=$(curl -k -s -o response.txt -w "%{http_code}" --connect-timeout 8 https://api.clarenceze.com/api/health || echo 000)
            echo "📡 HTTP 状态码: $STATUS_CODE"
            echo "📦 返回内容:"
            cat response.txt || true

            if [ "$STATUS_CODE" -eq 200 ]; then
              echo "✅ 健康检查通过"
            else
              echo "❌ 健康检查失败，状态码: $STATUS_CODE"
              exit 1
            fi

      - name: 🔁 自动回滚（仅当健康检查失败时触发）
        if: failure()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "⚠️ 健康检查失败，开始执行基于 Docker Hub 的远程回滚 ..."
            cd /root/fullstack-mvp/deploy/prod

            TOKEN=$(curl -s -H "Content-Type: application/json" \
              -X POST -d '{"username": "${{ secrets.DOCKER_USERNAME }}", "password": "${{ secrets.DOCKER_PASSWORD }}"}' \
              https://hub.docker.com/v2/users/login/ | jq -r .token)

            TAGS=$(curl -s -H "Authorization: JWT $TOKEN" \
              https://hub.docker.com/v2/repositories/clarenceze/fullstack-mvp/tags/?page_size=10 \
              | jq -r '.results[].name' | grep -v latest | head -n 2)

            CURRENT_TAG=$(echo "$TAGS" | sed -n '1p')
            PREV_TAG=$(echo "$TAGS" | sed -n '2p')

            echo "🧾 当前失败版本(云端): $CURRENT_TAG"
            echo "🧾 上一个稳定版本(云端): $PREV_TAG"

            if [ -n "$PREV_TAG" ]; then
              echo "🔄 回滚中..."
              docker pull clarenceze/fullstack-mvp:$PREV_TAG
              docker tag clarenceze/fullstack-mvp:$PREV_TAG clarenceze/fullstack-mvp:latest
              docker compose up -d --force-recreate app
              echo "✅ 已回滚至 clarenceze/fullstack-mvp:$PREV_TAG"
            else
              echo "⚠️ 云端未找到旧版本，跳过回滚"
              exit 0
            fi
