# ==========================================================
# 📦 CI 工作流：自动测试 + 构建 + 推送 Docker 镜像
# 作者：Hu Rongze
# ==========================================================
name: CI to Docker Hub

on:
  push:
    branches: ["main"]   # 当推送到 main 分支时触发

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # ------------------------------------------------------
      # 第 1 步：检出仓库代码（相当于 git clone）
      # ------------------------------------------------------
      - name: 🧩 Checkout code
        uses: actions/checkout@v4

      # ------------------------------------------------------
      # 第 2 步：设置 Python 环境（用于运行 pytest）
      # ------------------------------------------------------
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # ------------------------------------------------------
      # 第 3 步：缓存 pip 依赖（节省构建时间）
      # ------------------------------------------------------
      - name: ♻️ Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # ------------------------------------------------------
      # 第 4 步：安装依赖并运行冒烟测试
      # ------------------------------------------------------
      - name: 🧪 Run Smoke Tests
        working-directory: ./app
        run: |
          echo "🚀 开始安装依赖..."
          pip install -r requirements.txt
          echo "🧩 安装 pytest..."
          pip install pytest
          echo "🧠 运行冒烟测试..."
          pytest -v --maxfail=1 --disable-warnings
        # ✅ 如果测试失败，这个步骤会中断整个 CI 流程

      # ------------------------------------------------------
      # 第 5 步：登录 Docker Hub
      # ------------------------------------------------------
      - name: 🔑 Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # ------------------------------------------------------
      # 第 6 步：生成时间戳 TAG（如 2025-10-05-2200）
      # ------------------------------------------------------
      - name: 🕒 Set up image tag
        id: vars
        run: echo "TAG=$(date +'%Y-%m-%d-%H%M')" >> $GITHUB_ENV

      # ------------------------------------------------------
      # 第 7 步：构建并推送 Docker 镜像
      # ------------------------------------------------------
      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./app
          file: ./app/Dockerfile
          push: true
          tags: |
            clarenceze/fullstack-mvp:latest
            clarenceze/fullstack-mvp:${{ env.TAG }}

      # ------------------------------------------------------
      # 第 8 步：清理旧版本标签（保留最新 10 个 + latest）
      # ------------------------------------------------------
      - name: 🧹 Clean up old Docker Hub tags
        run: |
          echo "🧾 获取 Docker Hub 标签列表..."
          TOKEN=$(curl -s -H "Content-Type: application/json" \
            -X POST -d '{"username": "${{ secrets.DOCKER_USERNAME }}", "password": "${{ secrets.DOCKER_PASSWORD }}"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)

          TAGS=$(curl -s -H "Authorization: JWT $TOKEN" \
            https://hub.docker.com/v2/repositories/clarenceze/fullstack-mvp/tags/?page_size=100 \
            | jq -r '.results[].name' | grep -v latest)

          COUNT=$(echo "$TAGS" | wc -l)
          echo "📊 当前标签数量: $COUNT"

          if [ $COUNT -gt 10 ]; then
            DELETE_TAGS=$(echo "$TAGS" | tail -n +11)
            for tag in $DELETE_TAGS; do
              echo "🚮 删除旧标签: $tag"
              curl -s -X DELETE -H "Authorization: JWT $TOKEN" \
                https://hub.docker.com/v2/repositories/clarenceze/fullstack-mvp/tags/$tag/
            done
          else
            echo "✨ 无需清理，标签数量 <= 10"
          fi
