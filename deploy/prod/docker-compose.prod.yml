version: "3.9"

services:
  # =======================================================
  # ① 数据库服务 (PostgreSQL)
  # =======================================================
  db:
    image: postgres:16
    container_name: prod_db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command:
      [
        "postgres",
        "-c","shared_buffers=128MB",
        "-c","work_mem=4MB",
        "-c","effective_cache_size=256MB",
        "-c","maintenance_work_mem=64MB",
        "-c","max_connections=30",
        "-c","wal_buffers=4MB",
        "-c","checkpoint_completion_target=0.7"
      ]
    volumes:
      - prod_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks:
      - prod_net

  # =======================================================
  # ② 应用服务 (FastAPI)
  # =======================================================
  app:
    image: clarenceze/fullstack-mvp:latest
    container_name: prod_app
    restart: always
    environment:
      DATABASE_URL: ${DATABASE_URL}
      APP_PORT: ${APP_PORT}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      VIRTUAL_HOST: api.clarenceze.com
      LETSENCRYPT_HOST: api.clarenceze.com
      LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL}
      TZ: Asia/Taipei
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "8000"
    # 🚫 生产环境不映射源代码（防止热更新影响稳定性）
    # volumes:
    #   - ./app:/app
    #   - ./data:/app/data:ro
    #   - ./web:/app/web:ro
    networks:
      - prod_net

  # =======================================================
  # ③ Nginx 反向代理容器 (nginx-proxy)
  # =======================================================
  nginx-proxy:
    image: nginxproxy/nginx-proxy:latest
    container_name: prod_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    labels:
      - "com.github.nginx-proxy.nginx"       # ✅ 标记主 nginx 容器（供 acme-companion 自动识别）
    volumes:
      - ./certs:/etc/nginx/certs             # ✅ 已修正路径
      - ./vhost:/etc/nginx/vhost.d           # ✅ 已修正路径
      - ./html:/usr/share/nginx/html         # ✅ 已修正路径
      - ./logs:/var/log/nginx                # ✅ 已修正路径
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - prod_net

  # =======================================================
  # ④ Let’s Encrypt 自动签发与续签容器 (acme-companion)
  # =======================================================
  acme-companion:
    image: nginxproxy/acme-companion:latest
    container_name: prod_ssl
    restart: always
    depends_on:
      - nginx-proxy
    environment:
      DEFAULT_EMAIL: ${LETSENCRYPT_EMAIL}
      NGINX_PROXY_CONTAINER: prod_nginx       # ✅ 明确告知要连接哪个 nginx 容器
      TZ: Asia/Taipei
    volumes:
      - ./certs:/etc/nginx/certs              # ✅ 已修正路径
      - ./vhost:/etc/nginx/vhost.d            # ✅ 已修正路径
      - ./html:/usr/share/nginx/html          # ✅ 已修正路径
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - prod_net

# =======================================================
# 网络配置
# =======================================================
networks:
  prod_net:
    driver: bridge

# =======================================================
# 数据卷配置
# =======================================================
volumes:
  prod_db_data:
